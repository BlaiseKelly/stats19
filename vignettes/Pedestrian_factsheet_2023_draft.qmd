---
title: "Reproducing _Reported road casualties in Great Britain: pedestrian factsheet, 2023"
author: "Blaise Kelly"
format: html
editor: source
self-contained: true
---
# Introduction
This document aims to reproduce the 2018-2022 sections of the ["Accredited official statistics Reported road casualties in Great Britain: pedestrian factsheet, 2022"](https://www.gov.uk/government/statistics/reported-road-casualties-great-britain-pedestrian-factsheet-2022/reported-road-casualties-in-great-britain-pedestrian-factsheet-2022#further-information) report published on 28th September 2023.

```{r setup, echo=FALSE, warning=FALSE, error=FALSE, message=FALSE}

# https://www.gov.uk/government/statistics/reported-road-casualties-great-britain-pedestrian-factsheet-2023/reported-road-casualties-in-great-britain-pedestrian-factsheet-2023

library(stats19)
library(sf)
library(dplyr)
library(lubridate)
library(reshape2)
library(ggplot2)
library(knitr)
library(readODS)

# what casualty is the report for? options Pedestrian, Cyclist, escooters
report_casualty <- "Pedestrian"

  # stats19 usually updated in September, so if it is October last years data should be there
  yr2calc <- 2023

  # request collision data (entering 2004 results in a table with all years)
  crashes = get_stats19(year = "2004", type = "collision", ask = FALSE, format = TRUE, output_format = "data.frame")

  ## request casualty
  casualties = get_stats19(year = "2004", type = "casualty", ask = FALSE, format = TRUE, output_format = "data.frame")

  ## request vehicle
  vehicles = get_stats19(year = "2004", type = "vehicle", ask = FALSE, format = TRUE, output_format = "data.frame")

  # report only considers data from 2004 onwards
  crashes <- filter(crashes, accident_year >= 2004)
  casualties <- filter(casualties, accident_year >= 2004)
  vehicles <- filter(vehicles, accident_year >= 2004)
  # 
  # 
  # # most of the data is based on the last 5 years, speed up calcs by creating df for this
  cra_L5Y <- filter(crashes, accident_year <= yr2calc & accident_year >= yr2calc-4)
  cas_L5Y <- filter(casualties, accident_year <= yr2calc & accident_year >= yr2calc-4)
  veh_L5Y <- filter(vehicles, accident_year <= yr2calc & accident_year >= yr2calc-4)
  
crashes$number_of_casualties <- as.numeric(crashes$number_of_casualties)


# get population data from https://www.ons.gov.uk/peoplepopulationandcommunity/populationandmigration/populationestimates
  uk_pop <- read.csv("https://www.ons.gov.uk/file?uri=/peoplepopulationandcommunity/populationandmigration/populationestimates/datasets/populationestimatestimeseriesdataset/current/pop.csv", skip = 7)
  uk_pop <- uk_pop[,c(1,6)]
  names(uk_pop) <- c("Year", "Population")


  # get trip data NTS0303 https://www.gov.uk/government/statistical-data-sets/nts03-modal-comparisons
  download.file("https://assets.publishing.service.gov.uk/media/66ce0f118e33f28aae7e1f75/nts0303.ods", destfile = "nts0303.ods", mode = "wb")
  #download.file("https://assets.publishing.service.gov.uk/media/66ce0e818e33f28aae7e1f71/nts0101.ods", destfile = "nts0101.ods", mode = "wb")

  trips <- read_ods("nts0303.ods", sheet = "NTS0303c_miles", skip = 5) |>
    left_join(uk_pop, by = "Year") |>
    mutate(tot_dist_billion_miles = (`Walk [notes 2, 3]`*Population)/10^9)

    # ## save having to import each time or to work offline
  #save(crashes, casualties, vehicles,trips,uk_pop, file = "all_years.RData")
  
  # load(all_years.RData)
  


```



# 1. Main findings
Between 2004 and 2023
```{r, echo = FALSE, warning=FALSE, message=FALSE}

# pick out data only for 2004
fat_cas_2004 <- casualties |> filter(accident_year == "2004" & casualty_severity == "Fatal" & casualty_class == report_casualty)
#casualties this year (TY)
fat_cas_TY <- casualties |> filter(accident_year == yr2calc & casualty_severity == "Fatal" & casualty_class == report_casualty)

if(NROW(fat_cas_2004)>NROW(fat_cas_TY)){
  ud <- "down"
  fat_cas_diff <- round((1-NROW(fat_cas_TY)/NROW(fat_cas_2004))*100)
} else {
  ud <- "up"
  fat_cas_diff <- round((1-NROW(fat_cas_2004)/NROW(fat_cas_TY))*100)
}

ser_cas_2004 <- casualties |> filter(accident_year == "2004" & casualty_severity == "Serious" & casualty_class == report_casualty)
#casualties this year (TY)
ser_cas_TY <- casualties |> filter(accident_year == yr2calc & casualty_severity == "Serious" & casualty_class == report_casualty)

if(NROW(ser_cas_2004)>NROW(ser_cas_TY)){
  id <- "decreased"
  ser_cas_diff <-((NROW(ser_cas_TY)/NROW(ser_cas_2004))*100)
} else {
  id <- "increased"
  ser_cas_diff <- round((1-NROW(ser_cas_2004)/NROW(ser_cas_TY))*100)
}

dist_walked_2004 <- filter(trips, Year == "2004")
dist_walked_TY <- filter(trips, Year == yr2calc)

ped_traf <- (dist_walked_TY$tot_dist_billion_miles/dist_walked_2004$tot_dist_billion_miles)-1

```

 - fatalities were `r print(ud)` `r print(fat_cas_diff)` from `r print(NROW(fat_cas_2004))` to `r print(NROW(fat_cas_TY))`  
 - serious injuries decreased by `r ser_cas_diff`  
 - pedestrian traffic (distance walked) increased by `r ped_traf*100`

Averaged over the period `r print(yr2calc-4)` to `r print(yr2calc)`:
```{r, echo = FALSE, warning=FALSE, message=FALSE}

crash_cas <- inner_join(cas_L5Y,cra_L5Y) |> 
  filter(casualty_type == report_casualty)
  
# create column for weeks
dths_per_wk <- crash_cas %>%
  mutate(wk = isoweek(date),## calculate the day of week, Monday is 1
         yr = year(date)) %>% ## add year so all weeks over the 5 years are included
  select(wk,yr, accident_severity, casualty_class, accident_reference) %>% ## pick out the columns needed
  mutate(number_of_casualties = 1) |> # each row is a casualty
  filter(casualty_class == report_casualty) |>  ## pick out casualty the stats will focus on
  group_by(wk,yr, accident_severity) %>%
  summarise(casualties = sum(number_of_casualties))

  ## filter for only fatal collisions
fatal_wk <- dths_per_wk %>% 
  filter(accident_severity == "Fatal")

## filter for only serious injuries
serious_wk <- dths_per_wk %>% 
  filter(accident_severity == "Serious")

```

 - an average of `r round(mean(fatal_wk$casualties))` pedestrians died and `r round(mean(serious_wk$casualties))` were seriously injured (adjusted) per week in reported road collisions
 
```{r, echo = FALSE, warning=FALSE, message=FALSE}

## 20m junction
junctions <- crash_cas %>% 
  select(accident_severity, casualty_type, junction_detail, accident_reference) %>% 
  filter(casualty_type == report_casualty) %>% 
  mutate(count = 1) |> 
  group_by(accident_severity, junction_detail) %>% 
  summarise(casualties = sum(count)) 

## stats for within 20m of junctions
fatal_within_20 <- junctions %>% 
  filter(accident_severity == "Fatal") %>% 
  mutate(pc_junction = casualties/sum(casualties)*100) %>% 
  filter(junction_detail == "Not at junction or within 20 metres")

serious_within_20 <- junctions %>% 
  filter(accident_severity == "Serious") %>% 
  mutate(pc_junction = casualties/sum(casualties)*100)%>% 
  filter(junction_detail == "Not at junction or within 20 metres")

```

 - a majority of pedestrian fatalities (`r round(fatal_within_20$pc_junction)`%) do not occur at or within 20m of a junction compared to `r round(serious_within_20$pc_junction)`% of all seriously injured (adjusted) casualties

```{r, echo = FALSE, warning=FALSE, message=FALSE}

## single cars
number_vehicles <- crash_cas |> 
  select(accident_severity, casualty_type, number_of_vehicles,accident_reference) |> 
  filter(casualty_type == report_casualty) |> 
  mutate(count = 1) |> 
  group_by(accident_severity, number_of_vehicles) |> 
  summarise(casualties = sum(count)) 

# make table of only fatal to determine percentage of single
fatal_number_vehicle <- number_vehicles %>% 
  filter(accident_severity == "Fatal") |> 
  mutate(pc_vehicles = (casualties/sum(casualties))*100)


```

 - `r round(fatal_number_vehicle$pc_vehicles[1])`% of pedestrian fatalities were in collisions involving a single car


```{r, echo = FALSE, warning=FALSE, message=FALSE}

## rural or urban
rural_urban <- crash_cas %>% 
  select(accident_severity, casualty_type, urban_or_rural_area, accident_reference) %>% 
  filter(casualty_type == "Pedestrian") %>% 
   mutate(count = 1) %>% 
  group_by(accident_severity, urban_or_rural_area) %>% 
  summarise(casualties = sum(count)) 

fatal_rural <- rural_urban %>% 
  filter(accident_severity == "Fatal") %>% 
  mutate(pc_rural = casualties/sum(casualties)*100)

serious_rural <- rural_urban %>% 
  filter(accident_severity == "Serious") %>% 
  mutate(pc_rural = casualties/sum(casualties)*100)

rural_urban_all_cas <- crash_cas %>% 
  select(accident_severity, casualty_type, urban_or_rural_area, number_of_casualties,accident_reference) %>% 
  filter(casualty_type == "Pedestrian") %>% 
  mutate(count = 1) %>% 
  group_by(urban_or_rural_area) %>% 
  summarise(casualties = sum(count)) %>% 
  mutate(pc_rural = casualties/sum(casualties)*100) |> 
  filter(urban_or_rural_area == "Rural")

```

 - `r round(fatal_rural$pc_rural[1])`% of pedestrian fatalities occurred on rural roads compared to `r round(rural_urban_all_cas$pc_rural)`% of all pedestrian casualties

```{r, echo = FALSE, warning=FALSE, message=FALSE}

## male female
sex_casualty <- crash_cas %>% 
  select(accident_severity, casualty_type, sex_of_casualty, number_of_casualties,accident_reference) %>% 
  filter(casualty_type == "Pedestrian") %>% 
   mutate(count = 1) %>% 
  group_by(accident_severity, sex_of_casualty) %>% 
  summarise(casualties = sum(count)) 

serious_fatal_male <- sex_casualty %>% 
  filter(sex_of_casualty == "Male" & accident_severity %in% c("Fatal", "Serious"))

fatal_serious_tot <-sex_casualty %>% 
  filter(accident_severity %in% c("Fatal", "Serious"))

pc_fatal_serious_male <- sum(serious_fatal_male$casualties)/sum(fatal_serious_tot$casualties)*100

```

 - `r round(pc_fatal_serious_male)`% of pedestrian killed or seriously injured (KSI) casualties were male

The most common contributory factor allocated to pedestrians *no contributory factors included in this data?*

# 2. Pedestrian traffic and reported casualties
```{r, echo = FALSE, warning=FALSE, message=FALSE}

## only latest year (TY) in report
fatal_TY <- filter(casualties, accident_year == yr2calc, casualty_type == report_casualty, casualty_severity == "Fatal")

serious_TY <- filter(casualties, accident_year == yr2calc, casualty_type == report_casualty, casualty_severity == "Serious")

slight_TY <- filter(casualties, accident_year == yr2calc, casualty_type == report_casualty, casualty_severity == "Slight")

```

In `r yr2calc`, `r NROW(fatal_TY)` pedestrians were killed in Great Britain, whilst `r NROW(serious_TY)` were reported to be seriously injured (adjusted) and `r NROW(slight_TY)` slightly injured (adjusted).

```{r, echo = FALSE, warning=FALSE, message=FALSE}

trips <- select(trips, Year, Traffic = tot_dist_billion_miles)

table_1 <- casualties |> 
  filter(casualty_type == report_casualty) |> 
  mutate(casualty = 1) |> 
  group_by(accident_year, casualty_severity) |> 
  summarise(casualties = sum(casualty)) |> 
  tidyr::pivot_wider(names_from = "casualty_severity", values_from = "casualties") |> 
  rowwise() %>% 
  mutate(All = sum(c(Fatal, Serious, Slight))) |> 
  left_join(trips, by = c("accident_year" = "Year"))

dist_walked_2004 <- filter(trips, Year == 2004)
dist_walked_TY <- filter(trips, Year == yr2calc)

if(dist_walked_2004$Traffic > dist_walked_TY$Traffic){
  dw <- "decreased"
} else {
  dw <- "increased"
}

```

Table 1 and Chart 1 show that pedestrian traffic (measured by distance walked) has `r print(dw)` between 2004 and `r print(yr2calc)` whilst fatalities, serious and slight injuries have fallen.

```{r, echo = FALSE, warning=FALSE, message=FALSE}
## change between this year (TY) and last year (LY)
diff_fatal <- (table_1$Fatal[20]-table_1$Fatal[19])/table_1$Fatal[19]

diff_trips <- abs(table_1$Traffic[20]-table_1$Traffic[19])/table_1$Traffic[19]

# pedestrian fatalities increased or decreased
if(table_1$Fatal[20]>table_1$Fatal[19]){
  pf <- "increased"
} else {
  pf <- "decreased"
}

# pedestrian casualties all severities increased or decreased
if(table_1$All[20]>table_1$All[19]){
  pcr <- "increased"
} else {
  pcr <- "fallen"
}

```

Between `r yr2calc-1` and `r yr2calc`, pedestrian fatalities `r print(pf)` by `r round(diff_fatal*100)`% while pedestrian traffic (distance walked) `r print(dw)` by `r round(diff_trips*100)`%.

```{r, echo = FALSE, warning=FALSE, message=FALSE}

calc_index <- function(x) sum(x != 0) / length(x) * 100

benchmark_values <- table_1 %>% filter(accident_year == 2004) %>% select(where(is.numeric))

chart_1 <- table_1 %>%
  mutate(across(where(is.numeric), ~ .x / benchmark_values[[cur_column()]] * 100)) |> 
  select(-All) |> 
  melt("accident_year")

cols <- rev(c("#001a70", "#ff7733", "#1de9b6","#006853"))
cust_theme <- theme(panel.grid.major = element_line(size = 2))
# put the elements in a list
dft_theme <- list(cust_theme, scale_color_manual(values = cols))

chart_1 %>% 
  ggplot(aes(accident_year, value, color = variable)) +
  geom_line(size = 2, alpha = .8) +
  dft_theme+
  theme(panel.background = element_blank(),
        legend.position = "top",
    legend.title = element_blank()) +
  scale_x_continuous(expand = c(0, 0)) +
  geom_hline(yintercept=100, linetype='dotted', col = 'black')+
  ggtitle("Chart 1: Index of casualties by severity, GB: 2004 to 2023 (Index 2004=100)") +
  scale_x_continuous(name = NULL,
    breaks = seq(2004, 2023, by = 2)  # Add more tick marks
  ) +
  labs(caption = "Source: Stats19")

kable(table_1, caption = "Table 1: Number of reported pedestrian casualties by severity and traffic (pedestrian billion miles walked), GB: 2004 to 2023")



```

# 3. How far do pedestrians travel?
The National Travel Survey (NTS) which provides the [number of trips and average distance travelled](https://www.gov.uk/government/statistical-data-sets/nts03-modal-comparisons) (NTS0303) by person per year for English residents. This is used to derive casualty rates per mile travelled for pedestrians, which also use the Great Britain population figure to estimate total distance walked each year.

# 4. Casualty rates per mile
The pedestrian casualty rate has `r print(pcr)` for all severities in `r yr2calc` compared to 2004.

```{r, echo = FALSE, warning=FALSE, message=FALSE}

# compare the last year to 2004 for all stats
diff_all_2004 <- abs(table_1$All[20]-table_1$All[1])/table_1$All[1]
diff_fat_2004 <- abs(table_1$Fatal[20]-table_1$Fatal[1])/table_1$Fatal[1]
diff_sev_2004 <- abs(table_1$Serious[20]-table_1$Serious[1])/table_1$Serious[1]
diff_sli_2004 <- abs(table_1$Slight[20]-table_1$Slight[1])/table_1$Slight[1]

```

The overall casualty rate decreased by `r diff_all_2004*100`%. The fatality rate decreased by `r diff_fat_2004`% compared to a `r diff_sev_2004`% reduction for serious injuries and a `r diff_sli_2004`% reduction for slight injuries.

```{r, echo = FALSE, warning=FALSE, message=FALSE}

# pick out traffic
chart_2 <- filter(chart_1, !variable == "Traffic")

# define the colour palette
cols <- rev(c("#ff7733", "#1de9b6","#006853"))
cust_theme <- theme(panel.grid.major = element_line(size = 2))
# put the elements in a list
dft_theme <- list(cust_theme, scale_color_manual(values = cols))



chart_2 %>% 
  ggplot(aes(accident_year, value, color = variable)) +
  geom_line(size = 2, alpha = .8) +
  dft_theme+
  theme(panel.background = element_blank(),
        legend.position = "top",
    legend.title = element_blank()) +
  scale_x_continuous(expand = c(0, 0)) +
  geom_hline(yintercept=100, linetype='dotted', col = 'black')+
  ggtitle("Chart 1: Index of casualties by severity, GB: 2004 to 2023 (Index 2004=100)") +
  scale_x_continuous(name = NULL,
    breaks = seq(2004, 2023, by = 2)  # Add more tick marks
  ) +
  labs(caption = "Source: Stats19")

table_2 <- table_1 |> 
  transmute(Fatal = round(Fatal/Traffic),
         Serious = round(Serious/Traffic),
         Slight = round(Slight/Traffic),
         All = round(All/Traffic))



kable(table_2, caption = paste0("Table 2: Casualty rates of pedestrian casualties by severity per billion miles walked, GB: 2004 to ",yr2calc))
  
```


# 5. Sex and age comparisons

```{r, echo = FALSE, warning=FALSE, message=FALSE}

## by sex and age
sex_age_casualty <- cas_L5Y %>% 
  select(casualty_severity, casualty_type, sex_of_casualty, age_of_casualty) %>% 
  filter(casualty_type == report_casualty) %>% 
  mutate(count = 1) %>% 
  group_by(casualty_severity, sex_of_casualty, age_of_casualty) %>% 
  summarise(casualties = sum(count))

male_cas <- cas_L5Y |> filter(casualty_type == report_casualty & sex_of_casualty == "Male") 
female_cas <- cas_L5Y |> filter(casualty_type == report_casualty & sex_of_casualty == "Female") 
NROW(male_cas)/NROW(female_cas)

## sex and age again
tot_sexes <- sex_age_casualty %>% 
  ungroup() %>% 
  group_by(sex_of_casualty) %>% 
  summarise(casualties = sum(casualties))

male_tot <- round(tot_sexes$casualties[3]/sum(tot_sexes$casualties)*100)
female_tot <- round(tot_sexes$casualties[2]/sum(tot_sexes$casualties)*100)

males_times <- tot_sexes$casualties[3]/tot_sexes$casualties[2]


## by sex and age
sac_all <- casualties %>% 
  select(accident_year, casualty_severity, casualty_type, sex_of_casualty, age_of_casualty) |> 
  filter(accident_year >= yr2calc) |> 
  filter(casualty_type == report_casualty) |> 
  filter(sex_of_casualty %in% c("Male", "Female")) |> 
  filter(!casualty_severity == "Slight") |> 
  mutate(count = 1) |> 
  mutate(age_band = cut(as.numeric(age_of_casualty), breaks=c(0,11,15,19,24,29,39,49,59,69,100),labels=c("0-11","12-15","16-19","20-24","25-29","30-39","40-49","50-59","60-69","70+"))) |> 
  group_by(sex_of_casualty, age_band) %>% 
  summarise(casualties = sum(count)) |> 
    filter(!is.na(age_band))

# age band 1
ab1 <- "30-39"

# male female casualties for this age band
sac_ab1 <- sac_all |>  filter(age_band == ab1)

ab2 <- "0-11"

# male female casualties for this age band
sac_ab2 <- sac_all |>  filter(age_band == ab2)

ab3 <- "70+"

# male female casualties for this age band
sac_ab3 <- sac_all |>  filter(age_band == ab3)

cas_tot <- sum(sac_all$casualties)

sac_all$pc_ksi <- (sac_all$casualties/cas_tot)*100 

```
Between `r yr2calc-4` and `r yr2calc`, `r round(male_tot)`% of pedestrian casualties were male and `r round(female_tot)`% female.

There are `r round(males_times, 1)` times more male than female pedestrian casualties overall. This compares to `r sac_ab1$casualties[2]/sac_ab1$casualties[1]` more for `r ab1`,  `r sac_ab2$casualties[2]/sac_ab2$casualties[1]` more for `r ab2`and `r sac_ab3$casualties[2]/sac_ab3$casualties[1]` more for `r ab3` - the only age group in which female casualties outnumber males.

```{r, echo = FALSE, warning=FALSE, message=FALSE}

# Define colours and theme
cols <- rev(c("#1de9b6", "#006853"))
cust_theme <- theme(panel.grid.major = element_line(size = 2))
dft_theme <- list(cust_theme, scale_fill_manual(values = cols))  # use fill, not color

ggplot(sac_all, aes(x = age_band, y = pc_ksi, fill = sex_of_casualty)) + 
  geom_bar(stat = "identity", position = position_dodge(width = 0.7), width = 0.7) +
  geom_text(
    aes(label = paste0(round(pc_ksi),"%")),  # Round values to 1 decimal place
    position = position_dodge(width = 0.7),
    vjust = -0.5,
    size = 3
  ) +
  dft_theme +
  theme(
    panel.background = element_blank(),
    legend.position = "top",
    legend.title = element_blank()
  ) +
  ylab(NULL)+
  xlab(NULL)+
  labs(caption = "Source: Stats19")


```



# 7. Time of day of collisions
```{r, echo = FALSE, warning=FALSE, message=FALSE}
## create a table of severity by year
crash_time <- crash_cas %>% 
  select(accident_severity, casualty_type, datetime, number_of_casualties,accident_reference) %>% 
  mutate(accident_hr = hour(datetime),
         dow = lubridate::wday(datetime))  %>% 
  filter(casualty_type == "Pedestrian") %>% 
  filter(accident_severity %in% c("Fatal", "Serious")) |> 
  mutate(dow = case_when(dow > 1 & dow < 7 ~  "Monday to Friday", dow == 7 ~ "Saturday", dow == 1 ~ "Sunday")) |> 
  mutate(count = 1) %>% 
  group_by(accident_hr, dow) %>%  
  summarise(casualties = sum(as.numeric(number_of_casualties)))

# define the colour palette
cols <- rev(c("#ff7733", "#1de9b6","#006853"))
cust_theme <- theme(panel.grid.major = element_line(size = 2))
# put the elements in a list
dft_theme <- list(cust_theme, scale_color_manual(values = cols))

crash_time %>% 
  ggplot(aes(accident_hr, casualties, color = dow)) +
  geom_line(size = 2, alpha = .8) +
  dft_theme+
  theme(panel.background = element_blank()) +
  scale_x_continuous(expand = c(0, 0)) +
  ggtitle(paste0("Chart 4: Reported ", tolower(report_casualty), " KSIs by hour of day and day of week, GB: ", yr2calc-4, " to ", yr2calc)) +
  labs(x = "Hour starting", y = "casualties", caption = "Source: Stats19")

```


The weekday peak time for pedestrian KSIs is from 3pm to 6pm. By contrast, the peak is later in the early evening at weekends.

